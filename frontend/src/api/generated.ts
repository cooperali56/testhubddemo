/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * TestHub API文档
 * TestHub测试管理平台接口文档
 * OpenAPI spec version: v1.0.0
 */
import * as axios from "axios";
import type { AxiosRequestConfig, AxiosResponse } from "axios";

export type ResultVoidData = { [key: string]: unknown };

export interface ResultVoid {
  code?: number;
  message?: string;
  data?: ResultVoidData;
}

/**
 * 用户信息
 */
export interface UserDTO {
  id?: number;
  username?: string;
  password?: string;
  name?: string;
  role?: string;
  email?: string;
  phone?: string;
  status?: number;
  createTime?: string;
  updateTime?: string;
}

export interface ResultUserDTO {
  code?: number;
  message?: string;
  data?: UserDTO;
}

/**
 * 测试用例信息
 */
export interface TestCaseDTO {
  id?: number;
  name?: string;
  description?: string;
  precondition?: string;
  steps?: string;
  expectedResult?: string;
  actualResult?: string;
  status?: number;
  priority?: number;
  moduleId?: number;
  projectId?: number;
  creatorId?: number;
  creatorName?: string;
  executorId?: number;
  executorName?: string;
  createTime?: string;
  updateTime?: string;
}

export interface ResultTestCaseDTO {
  code?: number;
  message?: string;
  data?: TestCaseDTO;
}

export interface LoginRequest {
  username: string;
  password: string;
}

export interface LoginResponse {
  userId?: number;
  username?: string;
  name?: string;
  role?: string;
  token?: string;
  userInfo?: UserDTO;
}

export interface ResultLoginResponse {
  code?: number;
  message?: string;
  data?: LoginResponse;
}

export interface GrantedAuthority {
  authority?: string;
}

export interface ResultUserDetailsImpl {
  code?: number;
  message?: string;
  data?: UserDetailsImpl;
}

export interface User {
  id?: number;
  username?: string;
  password?: string;
  name?: string;
  role?: string;
  email?: string;
  phone?: string;
  status?: number;
  createTime?: string;
  updateTime?: string;
  deleted?: number;
}

export interface UserDetailsImpl {
  user?: User;
  authorities?: GrantedAuthority[];
  password?: string;
  username?: string;
  credentialsNonExpired?: boolean;
  accountNonExpired?: boolean;
  accountNonLocked?: boolean;
  enabled?: boolean;
}

export interface ResultTestCase {
  code?: number;
  message?: string;
  data?: TestCase;
}

export interface TestCase {
  id?: number;
  name?: string;
  description?: string;
  precondition?: string;
  steps?: string;
  expectedResult?: string;
  actualResult?: string;
  status?: number;
  priority?: number;
  moduleId?: number;
  projectId?: number;
  creatorId?: number;
  executorId?: number;
  createTime?: string;
  updateTime?: string;
  deleted?: number;
}

export interface ResultListUserDTO {
  code?: number;
  message?: string;
  data?: UserDTO[];
}

export interface ResultListTestCaseDTO {
  code?: number;
  message?: string;
  data?: TestCaseDTO[];
}

export interface IPageTestCase {
  current?: number;
  total?: number;
  pages?: number;
  records?: TestCase[];
  size?: number;
}

export interface ResultIPageTestCase {
  code?: number;
  message?: string;
  data?: IPageTestCase;
}

export type ResultMapStringObjectData = {
  [key: string]: { [key: string]: unknown };
};

export interface ResultMapStringObject {
  code?: number;
  message?: string;
  data?: ResultMapStringObjectData;
}

export type FindByPageParams = {
  /**
   * 页码
   */
  page?: number;
  /**
   * 每页大小
   */
  size?: number;
  /**
   * 状态
   */
  status?: string;
  /**
   * 模块ID
   */
  moduleId?: string;
  /**
   * 优先级
   */
  priority?: string;
};

export type GetTestTrendParams = {
  /**
   * 时间范围
   */
  days?: number;
};

export const getTestHubAPI = () => {
  /**
   * 根据ID获取用户详细信息
   * @summary 获取用户详情
   */
  const findById = <TData = AxiosResponse<ResultUserDTO>>(
    id: number,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/api/user/${id}`, options);
  };

  /**
   * 更新已有的用户信息
   * @summary 更新用户
   */
  const update = <TData = AxiosResponse<ResultUserDTO>>(
    id: number,
    userDTO: UserDTO,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.put(`/api/user/${id}`, userDTO, options);
  };

  /**
   * 删除指定的用户
   * @summary 删除用户
   */
  const _delete = <TData = AxiosResponse<ResultVoid>>(
    id: number,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.delete(`/api/user/${id}`, options);
  };

  /**
   * 根据ID获取测试用例详细信息
   * @summary 获取测试用例详情
   */
  const findById1 = <TData = AxiosResponse<ResultTestCaseDTO>>(
    id: number,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/api/testcase/${id}`, options);
  };

  /**
   * 更新已有的测试用例信息
   * @summary 更新测试用例
   */
  const update1 = <TData = AxiosResponse<ResultTestCaseDTO>>(
    id: number,
    testCaseDTO: TestCaseDTO,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.put(`/api/testcase/${id}`, testCaseDTO, options);
  };

  /**
   * 删除指定的测试用例
   * @summary 删除测试用例
   */
  const delete1 = <TData = AxiosResponse<ResultVoid>>(
    id: number,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.delete(`/api/testcase/${id}`, options);
  };

  /**
   * 用户退出登录
   * @summary 用户登出
   */
  const logout = <TData = AxiosResponse<ResultVoid>>(
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(`/auth/logout`, undefined, options);
  };

  /**
   * 根据用户名和密码进行登录
   * @summary 用户登录
   */
  const login = <TData = AxiosResponse<ResultLoginResponse>>(
    loginRequest: LoginRequest,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(`/auth/login`, loginRequest, options);
  };

  /**
   * 获取当前登录用户的信息
   * @summary 获取当前用户信息
   */
  const info = <TData = AxiosResponse<ResultUserDetailsImpl>>(
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(`/auth/info`, undefined, options);
  };

  /**
   * 获取系统中的所有用户信息
   * @summary 获取所有用户
   */
  const findAll = <TData = AxiosResponse<ResultListUserDTO>>(
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/api/user`, options);
  };

  /**
   * 创建新的用户
   * @summary 创建用户
   */
  const create = <TData = AxiosResponse<ResultUserDTO>>(
    userDTO: UserDTO,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(`/api/user`, userDTO, options);
  };

  /**
   * 获取系统中的所有测试用例
   * @summary 获取所有测试用例
   */
  const findAll1 = <TData = AxiosResponse<ResultListTestCaseDTO>>(
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/api/testcase`, options);
  };

  /**
   * 创建新的测试用例
   * @summary 创建测试用例
   */
  const create1 = <TData = AxiosResponse<ResultTestCaseDTO>>(
    testCaseDTO: TestCaseDTO,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.post(`/api/testcase`, testCaseDTO, options);
  };

  /**
   * 更新指定测试用例的状态
   * @summary 更新测试用例状态
   */
  const updateStatus = <TData = AxiosResponse<ResultTestCase>>(
    id: number,
    status: number,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.patch(
      `/api/testcase/${id}/status/${status}`,
      undefined,
      options,
    );
  };

  /**
   * 获取当前登录用户的详细信息
   * @summary 获取当前用户信息
   */
  const getCurrentUser = <TData = AxiosResponse<ResultUserDTO>>(
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/api/user/current`, options);
  };

  /**
   * 获取指定项目下的所有测试用例
   * @summary 获取项目测试用例
   */
  const findByProjectId = <TData = AxiosResponse<ResultListTestCaseDTO>>(
    projectId: number,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/api/testcase/project/${projectId}`, options);
  };

  /**
   * 根据条件分页查询测试用例
   * @summary 分页查询测试用例
   */
  const findByPage = <TData = AxiosResponse<ResultIPageTestCase>>(
    params?: FindByPageParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/api/testcase/page`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  /**
   * 获取指定模块下的所有测试用例
   * @summary 获取模块测试用例
   */
  const findByModuleId = <TData = AxiosResponse<ResultListTestCaseDTO>>(
    moduleId: number,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/api/testcase/module/${moduleId}`, options);
  };

  /**
   * 获取指定项目的测试执行趋势
   * @summary 获取测试趋势
   */
  const getTestTrend = <TData = AxiosResponse<ResultMapStringObject>>(
    projectId: number,
    params?: GetTestTrendParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/api/report/trend/${projectId}`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };

  /**
   * 获取指定项目的测试用例执行统计
   * @summary 获取项目测试概览
   */
  const getProjectOverview = <TData = AxiosResponse<ResultMapStringObject>>(
    projectId: number,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/api/report/overview/${projectId}`, options);
  };

  /**
   * 获取指定项目的测试用例分布情况
   * @summary 获取测试用例分布
   */
  const getTestDistribution = <TData = AxiosResponse<ResultMapStringObject>>(
    projectId: number,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/api/report/distribution/${projectId}`, options);
  };

  return {
    findById,
    update,
    _delete,
    findById1,
    update1,
    delete1,
    logout,
    login,
    info,
    findAll,
    create,
    findAll1,
    create1,
    updateStatus,
    getCurrentUser,
    findByProjectId,
    findByPage,
    findByModuleId,
    getTestTrend,
    getProjectOverview,
    getTestDistribution,
  };
};
export type FindByIdResult = AxiosResponse<ResultUserDTO>;
export type UpdateResult = AxiosResponse<ResultUserDTO>;
export type _DeleteResult = AxiosResponse<ResultVoid>;
export type FindById1Result = AxiosResponse<ResultTestCaseDTO>;
export type Update1Result = AxiosResponse<ResultTestCaseDTO>;
export type Delete1Result = AxiosResponse<ResultVoid>;
export type LogoutResult = AxiosResponse<ResultVoid>;
export type LoginResult = AxiosResponse<ResultLoginResponse>;
export type InfoResult = AxiosResponse<ResultUserDetailsImpl>;
export type FindAllResult = AxiosResponse<ResultListUserDTO>;
export type CreateResult = AxiosResponse<ResultUserDTO>;
export type FindAll1Result = AxiosResponse<ResultListTestCaseDTO>;
export type Create1Result = AxiosResponse<ResultTestCaseDTO>;
export type UpdateStatusResult = AxiosResponse<ResultTestCase>;
export type GetCurrentUserResult = AxiosResponse<ResultUserDTO>;
export type FindByProjectIdResult = AxiosResponse<ResultListTestCaseDTO>;
export type FindByPageResult = AxiosResponse<ResultIPageTestCase>;
export type FindByModuleIdResult = AxiosResponse<ResultListTestCaseDTO>;
export type GetTestTrendResult = AxiosResponse<ResultMapStringObject>;
export type GetProjectOverviewResult = AxiosResponse<ResultMapStringObject>;
export type GetTestDistributionResult = AxiosResponse<ResultMapStringObject>;
